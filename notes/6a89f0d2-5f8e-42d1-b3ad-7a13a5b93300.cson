createdAt: "2018-06-11T15:45:51.097Z"
updatedAt: "2018-06-14T15:25:54.790Z"
type: "MARKDOWN_NOTE"
folder: "d63afcce60d04356594e"
title: "Collections and generics"
content: '''
  ### Collections and generics
  
  - Method Arrays.asList() return an ArrayList but it's class Arrays.ArrayList, not java.util.ArrayList.
  - The Arrays$ArrayList is backed by an array and fixed-sized, therefore any operation to change its size will throw exception. E.g:
     ```
    String[] names = {"Jim", "James"};
    List list = Arrays.asList(names);
    list.remove(1); //this will throw UnsupportedOperationException because Arrays$ArrayList is fixed-sized
    ```
  - The binarySearch() if it cannot find the object, it will return the negative - 1 of the index that the object is supposed to be in. E.g:
  
    ```
    List list = Arrays.asList(1,3,5,6);
    System.out.println(Collections.binarySearch(list, 4)); //this will return -3 because 4 is suppose to be at index 2
    ```
  
  ## Working with Generics
  
  **Generic classes**
  - Formal type parameter is the generic type. E.g
  
    ```
    class Crate<T>{
      private T contents;
      public T emptyCrate(){
        return content;
      }
      public void packCrate(T content){
        this.content = content
      }
    }
    ```
  - The generics type T is available anywhere within the Crate class
  - The naming convention of generic type is as follow:
    - E for an element
    - K for a map key
    - V for a map value
    - N for a number
    - T for a generic data type
    - S, U, V and so forth for multiple generic types
    ```
    Elephant  elephant = new Elephant();
    Crate<Elephant> crate = new Crate();
    crate.packCrate(elephant);
    Elephant elephant2 = crate.emptyCrate();
    ```
    ```
    class SizeLimitedCrate{
      private T contents;
      private U sizeLimit;
      public SizeLimitedCrate(T content, U sizeLimit){
        this.content = contents;
        this.sizeLimit = sizeLimit;
      }
    }
  
    Elephant elephant = new Elephant();
    Integer numPound = 15_000;
    SizeLimitedCrate<Elephant, Integer> c1 = new SizeLimitedCrate<>(elephant, numPound);
    ```
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
'''
tags: []
isStarred: false
isTrashed: true
